

> SRC
    App.css
    App.jsx
    index.css
    main.jsx
    > Components
        > Authorization
            Authorized.jsx (should be able to copy paste from HRR with some modification)
            Login.jsx
            Register.jsx
        > Forms
            EventForm.jsx (the idea is that the form is the same for create and edit, but the act of submitting is different)
            ProfileForm.jsx
        > Events
            Event.jsx
            EventsList.jsx
        > Views
            ApplicationViews.jsx (where currentUser state is - invokes and displays UserViews)
            UserViews.jsx
        > Nav
            NavBar.jsx
        > Pages
            CreateEvents.jsx
            ViewEvents.jsx
            MyEvents.jsx
            EditEvent.jsx
            EditProfile.jsx
        > Welcome
            Welcome.jsx

    > Services
        eventServices.jsx (FETCH, POST, PUT, DELETE)
        userServices.jsx (FETCH, POST, PUT)
        userEventServices.jsx (FETCH, POST, DELETE)




checklist:
    > 0. create git repository and NPM install ✓
        install NPM and ensure npm run dev works ✓
        create git repository ✓
        create checklist file structure ✓
    > 1. create MVP directories ✓
        create all (anticipated) directories for MVP ✓
        create JSX (anticipated) files for MVP ✓
    > 2. create routes, starting at the top level and working further down ✓
        Main renders App ✓
        App renders Login, Register paths ✓
        App renders ApplicationViews ✓
        ApplicationViews renders UserViews ✓
            > UserViews: navbar, outlet, index element welcome ✓
                path: create event ✓
                path: view events ✓
                > path: my events ✓
                    edit event ✓
                    edit profile ✓
    > 3. create database, basic dummy/test data ✓
        create new directory outside of existing git structure ✓
        create database.json and populate according to MVP level ERD ✓
        add directory to independent github repo ✓
    > 4. create navbar and navbar functionality ✓
        create list with links ✓
        Verify navbar works as intended ✓
        modify logout functionality so it works with the database (prereq: 5) ✓
    > 5. import login and authorization functionality ✓
        login functionality ✓
        authorization functionality ✓
    > 6. create shallow functionality (forms and buttons that don't actually do anything, but will) ✓
        Login page with login button, login field, and register button ✓
        > edit profile page ✓
            Account form (edit/create) ✓
        > edit event page ✓
            Event form (edit/create) ✓
            > create the structure for every button that will ever display inside an event in Event.jsx ✓
                edit ✓
                delete ✓
                track/untrack ✓
        Register page with form and create button ✓
        Home page with home banner and upcoming events ✓
        Create event page with form and create button ✓
        > Events basic functionality ✓
            start with Event.jsx and create empty html ✓
            have EventList.jsx display that one event ✓
        View events page with all events shown ✓
        My events page with edit profile button ✓
        figure out how datetime/calendar functions export and what that looks like for JSON purposes X
    > 7. create basic CSS to approximate wireframe (prereq: 6)
        identify JSX files that will need CSS styling and create corresponding CSS files
        use flexbox to create basic alignment
    > 8. create services (setting up for deep functionality) ✓
        fetch events ✓
        fetch users ✓
        edit (put) event ✓
        delete event ✓
        edit (put) user information ✓
        create (post) event ✓
        create (post) user ✓
        fetch userEvent ✓
        create (post) userEvent ("track event") ✓
        delete userEvent ("untrack event") ✓
    > 9. create state for tracking X (handled elsewhere)
        Home page state for tracking userEvent (prereq: 5) 
        currentUser originates in ApplicationViews ✓
    > 10. Prop drilling? X (handled elsewhere)
        currentUser drilled from ApplicationViews to UserViews ✓
        > where else does currentUser need to be drilled to?
        > anything necessary for the discretionary display of tickets will need to be drilled
    > 11. integrate services with state and shallow functionality (buttons) to create full functionality ✓
        > Create events ✓
            make submission actually post to the database ✓
        > View events ✓
            display events from database ✓
            drill boolean variable into EventList -> Event for ternary buttons ✓
        > My events ✓
            display events, filtered, from database (how/where filter?) ✓
            drill boolean variable into EventList -> Event for ternary buttons ✓
            hook up delete event ✓
            > Edit event ✓
                hook up submission info to put ✓
            > Edit profile ✓
                hook up submission info to put ✓
        > Home/Welcome ✓
            display userEvents, filtered, from database (how/where filter?) ✓✓✓✓✓✓
            drill boolean variable into EventList -> Event for ternary buttons ✓
            "track" button functionality (creates userEvent) ✓
            "untrack" button functionality (deletes userEvent) ✓
        > Register user ✓
            hook up submission info to post ✓
    > 12. Test functionality for compliance with MVP (Create, Read, Update, Delete) ✓
    > 13. explore CSS libraries




REMEMBER FOR CSS: OPEN FLEXBOX EDITOR IN CHROME DEV TOOLS, ELEMENTS -> STYLES -> DISPLAY: FLEX; [CLICK THIS BOX]


3/14 learning moment: paths have to match the filename and function name of the element, but they do not have to be pascal cased
in the same way that the filename and function are.

3/14: just kill the location, it's too much work. Not worth right now. Pretty sure Dave said to do that anyways.

3/18: Some of the checklist items I had created were not useful for actually completing the project as their own items (9, 10) and
others just needed to be put off so I could focus on actual functionality (7, 13). 11 is what I plan on fleshing out and doing.

3/19: need the following: radio for themes drawn from a database, track/untrack. do NOT need to sort userEvent by startTime, at
least not right now.

3/20: pro tip: just don't make another module if you need the state that's in the existing module for your code to work.

3/21: oh, I need the readme too.